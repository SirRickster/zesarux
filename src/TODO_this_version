

-Opción por defecto no permitir "zoom x" diferente de "zoom y" al redimensionar ventana mediante ratón. Quedarse con valor inferior de zoom
ok *pendiente sdl1,sdl2,X11. acabar de probar bien

-SDL2 no deja cambiar a zoom 2 redimensionando con ratón

-sdl en debian 12 32 bits inicializa muy lento


---------------------

--Inicio lectura mando analógico, como un volante


Probar en diferentes sistemas:
*acabar de probarlo de nuevo en todos: SDL windows, SDL linux, linux nativo, mac.

*continental circus, ---steering-wheel-address b50ch, parece de 16 bits, pero no va bien. intentar que funcione


--Fin lectura mando analógico, como un volante

---------------------


ok -En watches que permita agregar etiquetas a cada expresión
Por ejemplo si expresión es IX, etiqueta que diga "Dirección de carga"
Que se puedan activar etiquetas en cada watch independiente
* al agregar expresión: que meta etiqueta igual a expresión
* que sucede al editar expresión? no quiero que toque la etiqueta existente
Pero se distingue entre agregar y editar? Agregar seria cuando la existente está vacía
O directamente que el label muestre la que haya (si está vacía, meter igual a expresión)
* al mostrar, si label vacia: mostrar expresión. Esto es para facilitar updates de watches existentes en versiones anteriores,
sino el usuario lo veria en blanco

-view gosub stack como ventana en segundo plano y que se actualice continuamente


-Visor de basic que permita indicar dirección ram donde empezar: sirve para poder ver el bloque de basic
cargado desde el Cargador Azul por ejemplo
Quizá una ventana con una primera linea con dirección de inicio y otra info, y de la segunda linea hacia abajo que sea
el listado basic

ok *Sprite navigator por ejemplo usa una primera linea fija y la segunda para abajo variables

ok *Pero necesitaria ventana que trunque y justifique lineas, como una ventana de dialogo normal -> ejemplo en text adventure localidades
zxvision_generic_message_aux_justificar_lineas... para justificar
ok *y debug_view_basic_from_memory similar a como lo hace el file browser para mostrar vista basic con direccion inicio modificable

ok *misma ventana para basic normal y el modificable de direccion de inicio. con checkbox con algo como:
[x] Current basic / Start address
Si start address, que pregunte direccion inicio y también longitud en bytes

ok *que se pueda quedar en background. Que refresque al entrar y también estando en background si detecta cambios en programa
(quiza sacar un checksum cada 1 segundo de toda la longitud y ver si cambia)
ok *permitir betabasic: keywords son letras gráficas. opcion si mostrar keywords betabasic o no
ok *show address in view basic que aparezca también esa opción en la ventana (y quitarla del menu settings debug)
ok *funcion debug get basic limita el maximo de caracteres a MAX_TEXTO_GENERIC_MESSAGE
ok *Ver tokens adicionales de versiones superiores de betabasic
*poder buscar texto
ok *poder buscar lineas
ok *permitir pgup, pgdn
ok *probar en linux meter poke continuo en direccion basic y ver si libera bien memoria de buffers
* icono
* Ver basic con interface 1 conectado



-En view expanded desde tape input output etc que solo se pueda hacer View dentro, pero nada de move, delete, etc

-alguna manera que desde external audio source:
abra hexedit con expresión follow de ix
abra watches con watch DE, IX etc para la carga
abra vista basic
defina también tamaños de esas ventanas?

-Nuevo algoritmo de lectura de audio zx81 -> .P

* calculo aproximado de maxima amplitud. Para saber la media de amplitud.
valor inicial. Que suba hasta un máximo y baje a un mínimo. Eso para todo el audio. Eso es un pulso de subida
Eso devuelve un valor AMPLITUD_MEDIA

*Para lectura de pulso exacto, no aproximado:
valor inicial. que suba hasta un máximo y baje a un mínimo.
-Dos estados: subiendo y bajando. Inicial en subiendo.
-En estado subiendo:
--Mientras valor leido sea mayor que anterior, sigue en subiendo
--Si valor leido es menor que anterior, pasa a estado bajando
-En estado bajando:
--Mientras valor leido sea inferior a anterior, sigue en bajando
--Si valor leido es mayor que anterior, finaliza el pulso

Con condiciones:
** si está subiendo y sube y baja y luego sube (o sea aparentemente llegamos al final), si amplitud de la parte de
 bajada no al menos un 70% de AMPLITUD media, saltar a ciclo de subida
Esto es para evitar crestas que tienen "rugosidades" (forma de U en la misma cresta) o los "picos" producidos con los silencios
de delante de cada bit inicial
-> amplitud de la cresta de subida= valor máximo-valor inicial
-> amplitud de la cresta de bajada= valor máximo-valor final (actual)
Devolver:
-longitud de la cresta de subida: desde posición inicial hasta posición de máximo valor
-longitud de la cresta de bajada: desde posición de máximo valor hasta posición final
-amplitud de la cresta de subida
-amplitud de la cresta de bajada
Crestas de subida que sean 3 o 4 veces de mayor longitud que la cresta de bajada implica que hay un silencio antes de dicha onda
Crestas de bajada que sean 3 o 4 veces de mayor longiutd que la cresta de subide implica que hay un silencio despues de dicha onda
(esto ultimo no debería darse en teoria)

Nota: el final se marca con un pulso aislado (a diferencia de bits 0 - 4 pulsos - o bits 1 - 8 pulsos)